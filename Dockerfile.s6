FROM ryda20/alpine:3.16.s6

# set version label
ARG BUILD_DATE
ARG VERSION
ARG CODE_RELEASE
LABEL build_version="Linuxserver.io version:- ${VERSION} Build-date:- ${BUILD_DATE}"
LABEL maintainer="aptalca"

ENV \
	# code-server version \
	VERSION=4.7.0 \
	PROXY_DOMAIN="" \
	PASSWORD=""


RUN \
	echo "###===> Install dependencies" && \
	apk --no-cache --update add \
	# already add from base image
	# bash \
	zsh \
	curl \
	libc6-compat gcompat \
	# gnupg \
	nodejs \
	# openssh-client \
	# already add from base image
	# shadow \
	#
	#
	### fix ld-linux-x86-64.so.2 not found - comment out because already exist after install libc6-compat and gcompat
	#mkdir /lib64 && 
	#ln -s /lib/libc.musl-x86_64.so.1 /lib64/ld-linux-x86-64.so.2 && \
	git

RUN \	
	echo "###===> Install code-server ${CODE_RELEASE}" && \
	if [ -z ${CODE_RELEASE+x} ]; then \
		CODE_RELEASE=$(curl -sX GET https://api.github.com/repos/coder/code-server/releases/latest | awk '/tag_name/{print $4;exit}' FS='[""]' | sed 's|^v||'); \
	fi && \
	mkdir -p ${USER_APP_DIR}/code-server && \
	curl -o /tmp/code-server.tar.gz -L "https://github.com/coder/code-server/releases/download/v${CODE_RELEASE}/code-server-${CODE_RELEASE}-linux-amd64.tar.gz" && \
	tar xf /tmp/code-server.tar.gz -C ${USER_APP_DIR}/code-server --strip-components=1 && \
	#
	echo "remove original node execute file from code-server/lib folder" && \
	rm ${USER_APP_DIR}/code-server/lib/node && \
	#
	### check and remove unuse shortcut
	# remove node shortcut
	# -h determine file is a symbolic link
	if [ -f "${USER_APP_DIR}/code-server/node" ] && [ -h "${USER_APP_DIR}/code-server/node" ] ; then \
		rm ${USER_APP_DIR}/code-server/node ; \
	fi && \
	# remove code-server shortcut
	if [ -f "${USER_APP_DIR}/code-server/code-server" ] && [ -h "${USER_APP_DIR}/code-server/code-server" ] ; then \
		rm ${USER_APP_DIR}/code-server/code-server ; \
	fi && \
	# replace exec path from node to code-server in new path
	sed -i 's+"$ROOT\/lib\/node"+node+g' ${USER_APP_DIR}/code-server/bin/code-server && \
	#
	# Permission after extract
	chown -R ${USER_NAME}:${GROUP_NAME} ${USER_APP_DIR}

RUN \
	### Install zsh theme to $HOME directory
	sh -c "$(curl -fsSL https://raw.github.com/ohmyzsh/ohmyzsh/master/tools/install.sh)" && \
	rm -rf ~/.oh-my-zsh/.git* && \
	rm -rf ~/.oh-my-zsh/*.md && \
	cp ~/.oh-my-zsh/themes/robbyrussell.zsh-theme /tmp/ && \
	rm ~/.oh-my-zsh/themes/* && \
	mv /tmp/robbyrussell.zsh-theme ~/.oh-my-zsh/themes/ && \
	# change permisson
	chown -R ${USER_NAME}:${GROUP_NAME} ~/.oh-my-zsh ~/.zshrc && \
	chown ${USER_NAME}:${GROUP_NAME} ~/.zshrc

RUN \
	# check if use set sudo password
	if [ -n "${SUDO_PASSWORD}" ] || [ -n "${SUDO_PASSWORD_HASH}" ]; then \
		echo "setting up sudo access" ; \
		if ! grep -q "${USER_NAME}" /etc/sudoers; then \
			echo "adding ${USER_NAME} to sudoers" ; \
			echo "${USER_NAME} ALL=(ALL:ALL) ALL" >> /etc/sudoers ; \
		fi && \
		if [ -n "${SUDO_PASSWORD_HASH}" ]; then \
			echo "setting sudo password using sudo password hash" ; \
			sed -i "s|^${USER_NAME}:\!:|${USER_NAME}:${SUDO_PASSWORD_HASH}:|" /etc/shadow ; \
		else \
			echo "setting sudo password using SUDO_PASSWORD env var" ; \
			echo -e "${SUDO_PASSWORD}\n${SUDO_PASSWORD}" | passwd ${USER_NAME} ; \
		fi ; \
	else \
		echo "allow ${USER_NAME} can change his UID/GID only" ; \
		# echo -e '${USER_NAME} ALL = (root:root) NOPASSWD: \
		# /bin/cat,  \
		# /usr/sbin/groupmod -og $EGID ${USER_NAME}, \
		# !/usr/sbin/groupmod -g 0 ${USER_NAME}, \
		# !/usr/sbin/groupmod -og 0 ${USER_NAME}, \
		# /usr/sbin/usermod -ou $EUID -g $EGID ${USER_NAME}, \
		# !/usr/sbin/usermod -u 0 -g 0 ${USER_NAME}, \
		# !/usr/sbin/usermod -ou 0 -g 0 ${USER_NAME}' \
		# >> /etc/sudoers ; \
		# echo "stdUser ALL = (root:root) NOPASSWD: /bin/sed -i /etc/passwd -r 's/1000:1000/$PUID:$PGID/g'" >> /etc/sudoers ; \
		# # marlena ALL = NOPASSWD: /bin/systemctl restart nginx.service
		# # /bin/cat
		# # /usr/sbin/groupmod
		# # /usr/sbin/usermod
	fi

RUN \
	### End of RUN -> cleanup
	rm -rf /tmp/* && \
	rm -rf /var/cache/*

EXPOSE 8080
COPY S6/root /

# RUN by s6 script,so, no need entrypoint here, actualy, copy entrypoint content to 
# codeserver/S6/root/etc/services.d/code-server/run
# COPY entrypoint.sh /
# RUN chmod +x /entrypoint.sh
# ENTRYPOINT [ "/entrypoint.sh" ]

# active stdUser, so, all command below will run as stdUser
# s6 can run with another user: codeserver/S6/root/etc/services.d/code-server/run
# USER ${USER_NAME}