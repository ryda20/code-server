#!/bin/bash
# PATH=./node_modules/.bin:$PATH

# load log file
source ./task_utils/log
source ./task_utils/sed

# vars
REPOS=ryda20
NAME=code-server
VER=lasted
TAG_NAME=${REPOS}/${NAME}:${VER}
TAG_NAME_S6=$TAG_NAME.s6
TAG_NAME_ROOTLESS=$TAG_NAME.rootless

DOCKERFILE=Dockerfile

function build {
	# all params: ${@}
	# para 1: ${1}
	# para 2: ${2}
	# ...........
	buildtype=${1:help}       # default empty string for $1
	container_type=${2:-root} # default for container type

	#
	# dev: using Dockerfile with multiply of RUN command in seperated
	# for caching when docker build -> build fast but large image size
	# pro: using custom Dockerfile (auto create base on Dockerfile) with
	# merge all RUN command to one -> small image size
	if [ "$container_type" == "root" ] && [ "$buildtype" == "dev" ]; then
		_build_dev "$TAG_NAME" "$DOCKERFILE"
	elif [ "$container_type" == "root" ] && [ "$buildtype" == "pro" ]; then
		_build_pro "$TAG_NAME" "$DOCKERFILE"
	elif [ "$container_type" == "rootless" ] && [ "$buildtype" == "dev" ]; then
		_build_dev "$TAG_NAME_ROOTLESS" "$DOCKERFILE.rootless"
	elif [ "$container_type" == "rootless" ] && [ "$buildtype" == "pro" ]; then
		_build_pro "$TAG_NAME_ROOTLESS" "$DOCKERFILE.rootless"
	elif [ "$container_type" == "s6" ] && [ "$buildtype" == "dev" ]; then
		_build_dev "$TAG_NAME_S6" "$DOCKERFILE.s6"
	elif [ "$container_type" == "s6" ] && [ "$buildtype" == "pro" ]; then
		_build_pro "$TAG_NAME_S6" "$DOCKERFILE.s6"
	else
		_build_help
	fi
}

_build_dev() {
	# $1: tag
	# $2: docker file name
	# $3: working dir
	tag=${1:-}
	dockerfile=${2:-}
	work_dir=${3:-.}
	_log "tag: $tag, dockerfile: $dockerfile, work_dir: $work_dir"
	docker build \
		-t $tag \
		-f $dockerfile \
		$work_dir
}
_build_pro() {
	# $1: tag
	# $2: docker file name
	# $3: working dir
	tag=${1:-}
	dockerfile=${2:-}
	work_dir=${3:-.}

	_dockerfile_gen_product $2
	_exit_if_file_not_exist $2.p

	docker build \
		-t $tag \
		-f $dockerfile \
		$work_dir
	rm $2.p
}
_exit_if_file_not_exist() {
	if [ ! -f $1 ]; then
		echo "file $1 does not exist"
		exit
	fi
}

_build_help() {
	_log_title "
Description:
	Build docker image with tag '$TAG_NAME'
Params:
	\$1: build type (dev,pro)
	\$2: container type (root [default], rootless, s6)
Note:
	dev: build using normal Dockerfile (contain multiply of RUN command) -> image size large
	pro: build using custom Dockerfile (auto gen by this script) -> merge multiply RUN command into one -> image size smaller
	root: run container with default root user
	rootless: run container with normal user (stduser)
	s6: run container with s6-overlay (support multi process)
"
}

_dockerfile_gen_product() {
	_log "input dockerfile gen product $1"
	# $1: dockerfile input for generate pro version
	#
	# 1. copy to production dockerfile from input
	if [ "$1" == "" ]; then
		echo -e "missing docker input file"
		exit
	fi

	out_file=$1.p
	# 1. copy original dockerfile to new one
	cp $1 $out_file
	# 2. remove all empty line
	_sed_remove_empty_line $out_file
	# 3. remove all comment lines, line start with space or tab too
	_sed_remove_comment_line $out_file
	# 4. replace FIRST "RUN" with "FIRST_RUN" - _sed '1,/string/ s/string/replacement/' file
	_sed_replace_first_occur '^RUN' 'FIRST_RUN' $out_file
	# 5. delete all another RUN
	_sed_remove_all_occur '^RUN' $out_file
	# 6. find #ENDRUN and replace with "&& \"" -> we must escape \& -> &, \\ -> \
	_sed_replace_all_occur '[.]*#ENDRUN$' ' \&\& \\' $out_file
	# 7. replace FIRST_RUN to RUN
	_sed_replace_first_occur '^FIRST_RUN' 'RUN' $out_file
}

function start {
	echo "tag name: $TAG_NAME"
	echo "start task not implemented"
}

_help() {
	echo "$0 <task> <args>"
	echo "Tasks:"
	# hidden the function start with underline _, as it is internal functions
	compgen -A function | grep -v '^_' | cat -n
}

TIMEFORMAT="Task completed in %3lR"
time ${@:-_help}

# Allows to call a function based on arguments passed to the script
#$*
